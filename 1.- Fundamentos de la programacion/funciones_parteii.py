# -*- coding: utf-8 -*-
"""Funciones_ParteII.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZgvmKTsZTfA6NmmM8z4-6czybCG_lWJN

# **FUNCIONES PARTE 2**

**- FUNCIONES QUE LLAMAN A OTRAS FUNCIONES -**

Una función puede llamar a otra función, de forma fija y de la misma manera que se la llamaría desde fuera de dicha función.
"""

#Ejemplo 1 de función que llama a otra función
# print(funcion()), funcion(), v = funcion()

def funcion(): #Función sin paso de parámetros
    return ("Espero que tengas un excelente día")

def saludar(nombre, mensaje='Hola'): #Función con paso de parámetros
    # docstring documentación de la función
    'Función que saluda al usuario por medio de su nombre'
    # Para acceder al docstring se utiliza la función help(nombre_función)
    print(mensaje, nombre)
    print(funcion()) #Llamada a la función secundaria

#Programa Principal
nombre=input("Dame tu nombre: ")
saludar(nombre) #Llamada a la función principal

help(saludar)

#Ejemplo 2 de función que llama a otra función

def iva(monto): #Función con paso de parámetros
  iva = 16
  cal_iva = monto * iva / 100
  return (cal_iva)

def total(monto, IVA): #Función con paso de parámetros
  Total= monto + IVA
  return (Total)

def cantidad(): #Función sin paso de parámetros
  'Función básica para el cálculo del IVA de un monto' # docstring
  monto = float(input('¿Cual es el monto a calcular?: '))
  IVA = iva(monto) #Llamada a la función iva
  PrecT = total(monto,IVA) #Llamada a la función total
  print("Monto: ", monto, "\nIVA: ", IVA, "\nTotal: ", PrecT)

#Programa Principal
cantidad() #Llamada a la función cantidad

"""**- RECURSIVIDAD -**

Se denomina llamada recursiva o recursividad, a aquellas funciones que en el algoritmo, hacen referencia sí misma. Es decir, que la función se invoque a si misma.

Características de una función recursiva:


*   Caso base: Nos permitirá terminar la función en algún momento, y que no se produzcan llamadas infinitas.

*   Caso recursivo: En este caso llamamos nuevamente a la función, pero nos iremos acercando a la solución.

Ventajas:

*   Resolver problemas recurrentes.

*   Hacer un programa más corto y elegante.

Desventajas:

* Ocupa mucho espacio en memoria.

"""

# Ejemplo 1 Recursividad: Factorial de un número
# !5 = 1*2*3*4*5

def factorial(num): #Función con paso de parámetros
  print("Valor inicial: ",num)
  if num == 0 or num == 1: # Caso Base
    R = 1
  elif num > 1: # Caso Recursivo
    R = num * factorial(num-1)
  print("Valor final: ", R)
  return R

#Programa Principal
n = int(input("Número a calcular: "))
factorial(n)

# Ejemplo 2 Recursividad: Cuenta regresiva de un número

def cuenta_regresiva(numero):
  if numero > 0: #Caso recursivo
    print(numero)
    cuenta_regresiva(numero-1)
  else: #Caso Base
    print("Fin del programa")

cuenta_regresiva(10)

# Ejemplo 3 Recursividad: Juego de adivinanza
# != diferente a

def jugar(intento=1):
    print("\nIntento actual:",intento)
    respuesta = input("\n¿Qué animal tiene las 5 vocales?: ")
    if respuesta!="Murciélago" and respuesta!="murciélago" and respuesta!="MURCIÉLAGO": #Caso Base
        if intento < 3:
            print("\nFallaste! Inténtalo de nuevo")
            intento += 1 # intento = intento + 1
            jugar(intento) # Llamada recursiva
        else:
            print("\nPerdiste!")
    else:
        print("\n¡Ganaste!")

#Programa principal
print("Tienes 3 intentos para ganar.")
jugar()

# Ejemplo 4 Recursividad: Juego de adivinanza
# != diferente a

def jugar(intento=1):
    respuesta = input("¿Qué animal tiene las 5 vocales? ")
    respuesta = respuesta.lower() # lower() pasa a minúsculas y upper() a mayúsculas
    if respuesta!="murcielago" and respuesta!="murciélago":
        if intento < 3:
            print ("\nFallaste! Inténtalo de nuevo")
            intento += 1 # intento = intento + 1
            jugar(intento) # Llamada recursiva
        else:
            print ("\nPerdiste!")
    else:
        print ("\n¡Ganaste!")
jugar()

"""**Material de RECURSIVIDAD**

Videos de Recursividad:

Video 1: https://www.youtube.com/watch?v=lilBGvaOSy8

Video 2: https://www.youtube.com/watch?v=RxCo8OZkabQ
"""