# -*- coding: utf-8 -*-
"""Códigos_apoyo1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pv8-XyPNzYPMURKQTvUHCvpGwqBlAYE3
"""

#Letra Aleatoria 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'

import random #Librería aleatorio
import string #Librería de cadenas
random.choice(string.ascii_letters) #Extrae una letra de forma aleatoria.

#Número Aleatorio

import random #Librería aleatorio
random.randrange(10) #Extrae una número de forma aleatoria.

#Dato aleatorio a partir de una lista y un diccionario
import random

A = ['Trivia de colores', 'Trivia de animales', 'Trivia de películas', 'Trivia de música']
print("Lista:", random.choice(A))

B = dict(Trivias = ['Trivia de colores', 'Trivia de animales', 'Trivia de películas', 'Trivia de música'])
print("Diccionario:", random.choice(B["Trivias"]))

#Contraseñas

import getpass #Biblioteca para Contraseñas. Sirve para ocultar los datos ingresados por el teclado.
Password = getpass.getpass("Define una contraseña: ")
Contraseña = getpass.getpass("Ingresa la contraseña: ")
if Contraseña == Password:
  print("Acceso Correcto")
else:
  print("Acceso Denegado, contraseña incorrecta.")

#Texto normal de distintos colores

print("\033[0;30m"+"Texto normal en color negro")
print("\033[0;31m"+"Texto normal en color rojo")
print("\033[0;32m"+"Texto normal en color verde")
print("\033[0;33m"+"Texto normal en color amarillo")
print("\033[0;34m"+"Texto normal en color azul")
print("\033[0;35m"+"Texto normal en color rosa")
print("\033[0;36m"+"Texto normal en color cian")
print("\033[0;37m"+"Texto normal en color gris")

#Texto en negritas de distintos colores

print("\033[1;30m"+"Texto en negrita color negro")
print("\033[1;31m"+"Texto en negrita color rojo")
print("\033[1;32m"+"Texto en negrita color verde")
print("\033[1;33m"+"Texto en negrita color amarillo")
print("\033[1;34m"+"Texto en negrita color azul")
print("\033[1;35m"+"Texto en negrita color rosa")
print("\033[1;36m"+"Texto en negrita color cian")
print("\033[1;37m"+"Texto en negrita color gris")

#Texto en cursiva de distintos colores

print("\033[3;30m"+"Texto en cursiva en color negro")
print("\033[3;31m"+"Texto en cursiva en color rojo")
print("\033[3;32m"+"Texto en cursiva en color verde")
print("\033[3;33m"+"Texto en cursiva en color amarillo")
print("\033[3;34m"+"Texto en cursiva en color azul")
print("\033[3;35m"+"Texto en cursiva en color rosa")
print("\033[3;36m"+"Texto en cursiva en color cian")
print("\033[3;37m"+"Texto en cursiva en color gris")

#Texto normal subrayado de distintos colores

print("\033[4;30m"+"Texto normal subrayado en color negro")
print("\033[4;31m"+"Texto normal subrayado en color rojo")
print("\033[4;32m"+"Texto normal subrayado en color verde")
print("\033[4;33m"+"Texto normal subrayado en color amarillo")
print("\033[4;34m"+"Texto normal subrayado en color azul")
print("\033[4;35m"+"Texto normal subrayado en color rosa")
print("\033[4;36m"+"Texto normal subrayado en color cian")
print("\033[4;37m"+"Texto normal subrayado en color gris")

#Texto en negritas con fondo de distintos colores

print("\033[1;37;40m"+"Texto color blanco en negritas con fondo negro")
print("\033[1;37;41m"+"Texto color blanco en negritas con fondo rojo")
print("\033[1;37;42m"+"Texto color blanco en negritas con fondo verde")
print("\033[1;37;43m"+"Texto color blanco en negritas con fondo amarillo")
print("\033[1;37;44m"+"Texto color blanco en negritas con fondo azul")
print("\033[1;37;45m"+"Texto color blanco en negritas con fondo rosa")
print("\033[1;37;46m"+"Texto color blanco en negritas con fondo cian")
print("\033[1;30;47m"+"Texto color negro en negritas con fondo gris")

#Borrar la pantalla después de un tiempo determinado

import time #Biblioteca que nos permite ingresar al tiempo del sistema
#Biblioteca que nos permite tener distintas funciones de pantalla, como desplegar imágenes, tablas, borrar la terminal, etc.
from IPython.display import clear_output

print("\033[1;37;41m"+"Hola")
time.sleep(5) #Instrucción que retrasa la ejecución de un proceso
clear_output() #Instrucción para borrar la pantalla
print("\033[1;37;46m"+"¿Cómo estás?")
time.sleep(3)
clear_output()
print("\033[1;37;44m"+"Hasta luego...")

#Desplegar una imagen y después de un tiempo determinado borrarla

'''
Para desplegar una imagen primero es necesario cargarla al entorno de ejecución
dando clic en la carpeta y agregando el archivo. Recuerda que el nombre con el
que se cargue el archivo, será el nombre con el que se deberá buscar.
'''

#Biblioteca que nos permite tener distintas funciones de pantalla, como desplegar imágenes, tablas, borrar la terminal, etc.
from IPython.display import Image, display, clear_output
import time #Biblioteca que nos permite ingresar al tiempo del sistema

path = "Imagen2.jpg" #Nombre de la imagen a desplegar. La imagen debe estar cargada en el entorno de colab o en drive
display(Image(filename = path)) #Instrucción que despliega en pantalla una imagen seleccionada
time.sleep(5) #Instrucción que retrasa la ejecución de un proceso
clear_output() #Instrucción para borrar la pantalla
print("\033[1;37;41m"+"Saliendo del programa....")

#Seleccionar una imagen de forma aleatoria, mostrarla y eliminarla después de un tiempo determinado.

#Biblioteca que nos permite tener distintas funciones de pantalla, como desplegar imágenes, tablas, borrar la terminal, etc.
from IPython.display import Image, display, clear_output
import time #Biblioteca que nos permite ingresar al tiempo del sistema
import random #Librería aleatorio

ImLista = ['Imagen1.jpg','Imagen2.jpg','Imagen3.png'] #Puedo hacer una lista con todas las imágenes a desplegar
x = 1 #Variable de control para el ciclo
c = 0 #Variable contadora

while x == 1:
  Imagen = random.choice(ImLista) #Se genera una opción aleatoria
  display(Image(filename=Imagen)) #Se despliega a la imagen que se seleccionó aleatoriamente
  time.sleep(5) #Se dan 5 segundos de retardo
  clear_output() #Se borra la pantalla
  ImLista.remove(Imagen) #Se elimina a la imagen desplegada de la lista
  c += 1
  if c < 3:
    x = 1
  else:
    x = 2
print("\033[1;37;41m"+"Saliendo del programa....")

'''Ejemplo para montar la unidad de drive en mi entorno de ejecución de colab.
Al momento de correr se solicitará un permiso para acceder a todo el contenido del drive y esto
genera un código que hay que copiar y pegar.
Hecho esto si todo esta en orden saldrá la siguiente respuesta: Mounted at /content/drive
Una vez que se monto la unidad drive se podrá acceder a todas las carpetas y archivos que se tengan.
Sugiero hacer una carpeta específica con las imágenes que requieran.
'''
from google.colab import drive
drive.mount('/content/drive')

from google.colab import drive
drive.mount('/content/drive')

''' Para aceeder a los archivos utilizaremos a IPython.display como en los ejemplos de apoyo que vimos,
lo importante es saber la extension de la carpeta o archivo ejemplo:
'drive/MyDrive/Carpeta/Archivo'
'''
from IPython.display import Image, display
display(Image(filename='drive/MyDrive/Imagenes/Imagen1.jpg'))

#Método para asignar una lista vacía a un diccionario
#global Datos = {}
Datos = {} #Diccionario vacío este tiene que ser global

#Funcion del registro
print("---Registro---")
Nombre = input("Ingresa tu nombre: ")
Datos[Nombre] = [] #Se asigna la lista a la clave del nombre
print(Datos)

#Funcion para verificar puntuaciones
#Método para verificar las puntuaciones a partir de una lista en un diccionario
print("\n---Verificar puntuaciones---")
Nombre = input("Ingresa tu nombre: ")
if len(Datos.get(Nombre)) == 0: #Se verifica si la lista asociada a la clave esta vacía
  print("Aún no tienes puntuaciones registradas.") #Si está vacía se le indica al usuario que aún no tiene puntuaciones registradas.
else:
  print("Tus puntaciones son las siguientes: ", Datos.get(Nombre)) #En caso contrario se muestran las puntuaciones
  #Para mostrar las puntuaciones por separado se tendría que hacer uso de una estructura repetitiva

#Método para asignar puntuaciones a una lista en un diccionario
print("\n---Asignar puntuaciones---")
Datos[Nombre].append(55)#Se utiliza al método append() para la asignación del valor en la lista
print(Datos) #Datos[Nombre] -> Indica el diccionario y la clave donde se guardará el valor
Datos[Nombre].append(30)#append() agrega al nuevo elemento en la última posición de la lista
print(Datos)

#Metodo anterior aplicado a funciones
global jugadores #Variable global para designar a los jugadores y sus puntuaciones
jugadores = {'Pedro':[1,0,0], 'Karla':[0,1,1,1], 'Luis':[1,0,1], 'Samantha':[0,0,1]}#En un diccionario se guarda a los jugadores y sus puntuaciones

def buscar(nombre):
  respuesta = nombre in jugadores
  if respuesta == False:
    opc = int(input("El jugador {} no esta registrado.\n\n¿Desea registrarlo?\n\n1. Si\n2. No\n\nRespuesta: ".format(nombre)))
    if opc == 1:
      agregar(nombre)
    else:
      print("\nRegresando al menú principal...\n")
  return nombre

def puntuaciones(nombre):
  buscar(nombre)
  if jugadores[nombre]:
    print("\nJugador: {}\nPuntuaciones: {}".format(nombre, jugadores[nombre]))
  else:
    print("El jugador {} aún no tiene puntuaciones registradas.".format(nombre))

def agregar(nombre):
  jugadores[nombre] = []
  print("\nEl jugador {}, fue agregado exitosamente.\n".format(nombre))

def borrar(nombre):
  buscar(nombre)
  del jugadores[nombre]
  print("\n\nSe eliminó al jugador {}.".format(nombre))


def principal():
  opc = int(input("\n¿Que desea hacer?\n\n1. Verificar puntuaciones\n2. Agregar un nuevo jugador\n3. Borrar un jugador\n4. Jugar\n5. Salir\n\nOpción: "))

  if opc == 1 or opc == 2 or opc == 3:
    nombre = input("\nIngrese el nombre del jugador: ").capitalize()

  if opc == 1:
    puntuaciones(nombre)
  elif opc == 2:
    agregar(nombre)
  elif opc == 3:
    borrar(nombre)
  elif opc == 4:
    #Depende del juego a aplicar
    print("Nada")
  elif opc == 5:
    print("Saliendo...")
  else:
    print("Opción no válida, intentelo de nuevo.")
    principal()

  if opc == 1 or opc == 2 or opc == 3 or opc == 4:
    principal()

principal()